include $(TOP)/config/make.cfg

EXEDIR := $(CONTRIBDIR)/Development/Lua

# files to build the linker lib 'luaxmlreader'
XMLLIBFILES := error xmlreader
HEADERS := error.h

USER_INCLUDES := -I$(AROS_DEVELOPMENT)/include/lua -I$(AROS_DEVELOPMENT)/include/libxml2

#MM- contrib-development-luaxmlreader-lib : development-libxml2


# assign and generate the local variables used in this macro
OBJDIR        ?= $(GENDIR)/$(CURDIR)

BD_FILES      := $(XMLLIBFILES)
BD_CXXFILES   := $(basename $(call WILDCARD, *.cpp))
BD_ASMFILES   := 

BD_ARCHOBJS   := $(wildcard $(OBJDIR)/arch/*.o)
BD_ARCHFILES  := $(basename $(notdir $(BD_ARCHOBJS)))
BD_NARCHFILES := $(filter-out $(BD_ARCHFILES),$(BD_FILES))

BD_OBJS       := $(BD_ARCHOBJS) \
                 $(addsuffix .o,$(addprefix $(OBJDIR)/,$(notdir $(BD_NARCHFILES) $(BD_CXXFILES) $(BD_ASMFILES)))) \
                 
BD_DEPS       := $(patsubst %.o,%.d,$(BD_OBJS))

BD_CFLAGS     := $(CFLAGS)
ifeq (,)
BD_DFLAGS     := $(BD_CFLAGS)
else
BD_DFLAGS     := 
endif
BD_AFLAGS     := $(AFLAGS)

BD_LINKLIB    := $(LIBDIR)/libluaxmlreader.a

.PHONY : contrib-development-luaxmlreader-lib contrib-development-luaxmlreader-lib-clean

#MM contrib-development-luaxmlreader-lib : includes-generate-deps
contrib-development-luaxmlreader-lib : $(BD_LINKLIB)

#MM
contrib-development-luaxmlreader-lib-clean ::
	@$(RM) $(BD_OBJS) $(BD_DEPS)

ifeq ($(TARGET),contrib-development-luaxmlreader-lib)
ifneq ($(dir $(BD_FILES)),./)
TMP_SRCDIR := $(shell echo $(SRCDIR) | sed 's/^\(.\):\//\/\1\//')
vpath %.c $(addprefix $(TMP_SRCDIR)/$(CURDIR)/,$(dir $(BD_FILES)))
endif


ifeq ($(OBJDIR),)
  TMP_TARGETBASE := %
else
  TMP_TARGETBASE := $(OBJDIR)/$(notdir %)
endif

ifeq ($(findstring target,host kernel target),)
  $(error unknown compiler target)
endif
ifeq (target,target)
$(TMP_TARGETBASE).o : TMP_CMD:=$(TARGET_CC) $(TARGET_CFLAGS)
$(TMP_TARGETBASE).d : TMP_CMD:=$(TARGET_CC) $(TARGET_CFLAGS)
$(TMP_TARGETBASE).o : TMP_IQUOTE:=$(CFLAGS_IQUOTE)
$(TMP_TARGETBASE).d : TMP_IQUOTE:=$(CFLAGS_IQUOTE)
$(TMP_TARGETBASE).o : TMP_IQUOTE_END:=$(CFLAGS_IQUOTE_END)
$(TMP_TARGETBASE).d : TMP_IQUOTE_END:=$(CFLAGS_IQUOTE_END)
endif
ifeq (target,host)
$(TMP_TARGETBASE).o : TMP_CMD:=$(HOST_CC)
$(TMP_TARGETBASE).d : TMP_CMD:=$(HOST_CC)
$(TMP_TARGETBASE).o : TMP_IQUOTE:=$(HOST_IQUOTE)
$(TMP_TARGETBASE).d : TMP_IQUOTE:=$(HOST_IQUOTE)
$(TMP_TARGETBASE).o : TMP_IQUOTE_END:=$(HOST_IQUOTE_END)
$(TMP_TARGETBASE).d : TMP_IQUOTE_END:=$(HOST_IQUOTE_END)
endif
ifeq (target,kernel)
$(TMP_TARGETBASE).o : TMP_CMD:=$(KERNEL_CC) $(KERNEL_CFLAGS)
$(TMP_TARGETBASE).d : TMP_CMD:=$(KERNEL_CC) $(KERNEL_CFLAGS)
$(TMP_TARGETBASE).o : TMP_IQUOTE:=$(KERNEL_IQUOTE)
$(TMP_TARGETBASE).d : TMP_IQUOTE:=$(KERNEL_IQUOTE)
$(TMP_TARGETBASE).o : TMP_IQUOTE_END:=$(KERNEL_IQUOTE_END)
$(TMP_TARGETBASE).d : TMP_IQUOTE_END:=$(KERNEL_IQUOTE_END)
endif

ifeq (no,yes)
  $(TMP_TARGETBASE).o : CFLAGS := -nix $(BD_CFLAGS)
else
  $(TMP_TARGETBASE).o : CFLAGS := $(BD_CFLAGS)
endif
$(TMP_TARGETBASE).o : %.c
	@$(ECHO) "Compiling $<"
	@$(IF) $(TMP_CMD) $(TMP_IQUOTE) $(dir $<) $(TMP_IQUOTE) $(SRCDIR)/$(CURDIR) $(TMP_IQUOTE) . $(TMP_IQUOTE_END) $(CFLAGS) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$<: $(TMP_CMD) $(TMP_IQUOTE) $(dir $<) $(TMP_IQUOTE) $(SRCDIR)/$(CURDIR) $(TMP_IQUOTE) . $(TMP_IQUOTE_END) $(CFLAGS) -c $< -o $@" >> $(GENDIR)/errors ; \
		tee < $(GENDIR)/cerrors -a $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(TMP_CMD) $(TMP_IQUOTE) $(dir $<) $(TMP_IQUOTE) $(SRCDIR)/$(CURDIR) $(TMP_IQUOTE) . $(TMP_IQUOTE_END) $(CFLAGS) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

ifeq ($(BD_DFLAGS),)
  ifeq (no,yes)
    $(TMP_TARGETBASE).d : TMP_DFLAGS:=-nix $(BD_CFLAGS)
  else
    $(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_CFLAGS)
  endif
else
  ifeq (no,yes)
    $(TMP_TARGETBASE).d : TMP_DFLAGS:=-nix $(BD_DFLAGS)
  else
    $(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_DFLAGS)
  endif
endif
$(TMP_TARGETBASE).d : %.c
	@$(IF) $(TEST) ! -d $(dir $@) ; then $(MKDIR) $(dir $@) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$(notdir $<)..."
	@AROS_CC="$(TMP_CMD)" $(MKDEPEND) $(TMP_DFLAGS) -I$(TOP)/$(CURDIR) -I$(SRCDIR)/$(CURDIR) $< -o $@

# Adjust compiler flags to suit C++
TMP_CXXFLAGS := $(BD_CFLAGS)
TMP_CXXFLAGS := $(TMP_CXXFLAGS) -fno-rtti -fno-exceptions -fno-check-new -isystem $(AROS_DEVELOPMENT)/include
TMP_CXXFLAGS := $(subst -Wno-pointer-sign,, $(subst -Werror-implicit-function-declaration,, $(TMP_CXXFLAGS)))

ifeq ($(OBJDIR),)
TMP_TARGETS := $(addsuffix .o,$(BD_CXXFILES))
TMP_DTARGETS := $(addsuffix .d,$(BD_CXXFILES))
TMP_WILDCARD := %
else
TMP_TARGETS := $(addsuffix .o,$(addprefix $(OBJDIR)/,$(BD_CXXFILES)))
TMP_DTARGETS := $(addsuffix .d,$(addprefix $(OBJDIR)/,$(BD_CXXFILES)))
TMP_WILDCARD := $(OBJDIR)/%

# Be sure that all .cpp files are generated
$(TMP_TARGETS) $(TMP_DTARGETS) : | $(addsuffix .cpp,$(BD_CXXFILES))

# Be sure that all .cpp files are found
TMP_SRCDIR := $(shell echo $(SRCDIR) | sed 's/^\(.\):\//\/\1\//')
TMP_BASEDIRS := $(shell echo $(sort $(dir $(BD_CXXFILES))) | sed 's/\(.\):\//\/\1\//g')
TMP_DIRS := $(foreach dir, $(TMP_BASEDIRS), $(if $(filter /%,$(dir)),$(dir),$(TMP_SRCDIR)/$(CURDIR)/$(dir)))
ifneq ($(TMP_DIRS),)
    TMP_DIRS := $(shell echo $(TMP_DIRS) | sed 's/\(.\):\//\/\1\//g')
    vpath %.cpp $(TMP_DIRS)
endif

endif

# Define the use of cross compiler
ifeq ($(TARGET_CXX),)
  TMP_CC := $(CROSSTOOLSDIR)/$(AROS_TARGET_CPU)-aros-g++
else
  TMP_CC := $(TARGET_CXX)
endif

ifeq ($(findstring target,host kernel target),)
  $(error unknown compiler target)
endif
ifeq (target,target)
$(TMP_TARGETS) $(TMP_DTARGETS) : CMD:=$(TMP_CC) $(TARGET_CFLAGS)
$(TMP_TARGETS) $(TMP_DTARGETS) : TMP_IQUOTE:=$(CFLAGS_IQUOTE)
$(TMP_TARGETS) $(TMP_DTARGETS) : TMP_IQUOTE_END:=$(CFLAGS_IQUOTE_END)
endif
ifeq (target,host)
$(TMP_TARGETS) $(TMP_DTARGETS) : CMD:=$(HOST_CXX)
$(TMP_TARGETS) $(TMP_DTARGETS) : TMP_IQUOTE:=$(HOST_IQUOTE)
$(TMP_TARGETS) $(TMP_DTARGETS) : TMP_IQUOTE_END:=$(HOST_IQUOTE_END)
endif
ifeq (target,kernel)
$(TMP_TARGETS) $(TMP_DTARGETS) : CMD:=$(KERNEL_CXX) $(KERNEL_CFLAGS)
$(TMP_TARGETS) $(TMP_DTARGETS) : TMP_IQUOTE:=$(KERNEL_IQUOTE)
$(TMP_TARGETS) $(TMP_DTARGETS) : TMP_IQUOTE_END:=$(KERNEL_IQUOTE_END)
endif

$(TMP_TARGETS) : CFLAGS := $(TMP_CXXFLAGS)
$(TMP_TARGETS) : $(TMP_WILDCARD).o : %.cpp
	@$(ECHO) "Compiling $<"
	@$(IF) $(CMD) $(TMP_IQUOTE) $(dir $<) $(TMP_IQUOTE) $(SRCDIR)/$(CURDIR) $(TMP_IQUOTE) . $(TMP_IQUOTE_END) $(CFLAGS) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$<: $(CMD) $(TMP_IQUOTE) $(dir $<) $(TMP_IQUOTE) $(SRCDIR)/$(CURDIR) $(TMP_IQUOTE) . $(TMP_IQUOTE_END) $(CFLAGS) -c $< -o $@" >> $(GENDIR)/errors ; \
		tee < $(GENDIR)/cerrors -a $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(CMD) $(TMP_IQUOTE) $(dir $<) $(TMP_IQUOTE) $(SRCDIR)/$(CURDIR) $(TMP_IQUOTE) . $(TMP_IQUOTE_END) $(CFLAGS) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

ifeq ($(BD_DFLAGS),)
$(TMP_DTARGETS) : DFLAGS:=$(BD_CFLAGS)
else
$(TMP_DTARGETS) : DFLAGS:=$(BD_DFLAGS)
endif
$(TMP_DTARGETS) : $(TMP_WILDCARD).d : %.cpp
	@$(IF) $(TEST) ! -d $(dir $@) ; then $(MKDIR) $(dir $@) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$(notdir $<)..."
	@AROS_CC="$(CMD)" $(MKDEPEND) $(DFLAGS) -I$(TOP)/$(CURDIR) -I$(SRCDIR)/$(CURDIR) $< -o $@

ifeq ($(OBJDIR),)
%.o : AFLAGS := $(BD_AFLAGS)
%.o : %.s
	@$(ECHO) "Assembling $(notdir $<)..."
	@$(IF) $(CC) $(AFLAGS) $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$(notdir $<): $(CC) $(AFLAGS) $< -o $@" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Assemble failed: $(CC) $(AFLAGS) $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi
%.o : %.S
	@$(ECHO) "Assembling $(notdir $<)..."
	@$(IF) $(CC) $(AFLAGS) $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$(notdir $<): $(CC) $(AFLAGS) $< -o $@" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Assemble failed: $(CC) $(AFLAGS) $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

else
$(OBJDIR)/$(notdir %).o : AFLAGS := $(BD_AFLAGS)
$(OBJDIR)/$(notdir %).o : %.s
	@$(ECHO) "Assembling $(notdir $<)..."
	@$(IF) $(CC) $(AFLAGS) $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$(notdir $<): $(CC) $(AFLAGS) $< -o $@" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Assemble failed: $(CC) $(AFLAGS) $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi
$(OBJDIR)/$(notdir %).o : %.S
	@$(ECHO) "Assembling $(notdir $<)..."
	@$(IF) $(CC) $(AFLAGS) $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$(notdir $<): $(CC) $(AFLAGS) $< -o $@" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Assemble failed: $(CC) $(AFLAGS) $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

endif


$(LIBDIR)/libluaxmlreader.a : $(BD_OBJS)
	@$(ECHO) "Creating library $@..."
	@$(AR) $@ $^
	@$(RANLIB) $@
endif

ifneq ($(BD_DEPS),)
  ifneq (contrib-development-luaxmlreader-lib,)
    ifneq ($(findstring $(TARGET),contrib-development-luaxmlreader-lib),)
      -include $(BD_DEPS)
    endif
  else
    ifeq (,$(filter clean% %clean %clean% setup% includes% %setup,$(TARGET)))
      -include $(BD_DEPS)
    endif
  endif
endif

$(BD_OBJS) $(BD_DEPS) : | $(OBJDIR)
$(BD_LINKLIB) : | $(LIBDIR)
GLOB_MKDIRS += $(OBJDIR) $(LIBDIR)


# Delete generated makefiles
#MM
clean ::
	@$(RM) $(TOP)/$(CURDIR)/mmakefile $(TOP)/$(CURDIR)/mmakefile.bak

include $(SRCDIR)/config/make.tail

BDID := $(BDTARGETID)
